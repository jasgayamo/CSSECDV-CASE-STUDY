<%- include('header') %>
<h2>Your Posted Products</h2>
<ul>
  <% products.forEach(p => { %>
    <li>
      <strong><%= p.name %></strong>: <%= p.description %> - â‚±<%= p.price %>
      
      <!-- Edit Link that will trigger the modal -->
      <a href="#" class="edit-product-link" 
         data-id="<%= p._id %>"
         data-name="<%= p.name %>"
         data-description="<%= p.description %>"
         data-price="<%= p.price %>">Edit</a>
      
      <!-- Delete Form -->
      <form action="/products/delete/<%= p._id %>" method="POST" style="display:inline;">
        <button type="submit" onclick="return confirm('Are you sure you want to delete this product?');">Delete</button>
      </form>
    </li>
  <% }) %>
</ul>

<p><a href="/products/add">Add New Product</a></p>
<a href="/dashboard"><button type="button">Go to Dashboard</button></a>

<!-- Modal for editing product -->
<div id="editProductModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Edit Product</h2>
    <form id="editProductForm" method="POST">
      <input type="hidden" id="editProductId" name="productId">
      <label for="editName">Name:</label>
      <input type="text" id="editName" name="name" required>
      <label for="editDescription">Description:</label>
      <input type="text" id="editDescription" name="description" required>
      <label for="editPrice">Price:</label>
      <input type="number" id="editPrice" name="price" required>
      <button type="submit">Save Changes</button>
    </form>
  </div>
</div>

<%- include('footer') %>

<script>
   // Modal Handling Script
   const modal = document.getElementById('editProductModal');
   const closeModal = document.getElementsByClassName('close')[0];

   // Get all edit links
   const editLinks = document.querySelectorAll('.edit-product-link');

   // When an edit link is clicked, open the modal and pre-fill the form
   editLinks.forEach(link => {
     link.addEventListener('click', (e) => {
       e.preventDefault();

       const productId = link.getAttribute('data-id');
       const productName = link.getAttribute('data-name');
       const productDescription = link.getAttribute('data-description');
       const productPrice = link.getAttribute('data-price');

       // Pre-fill the modal form with the selected product's data
       document.getElementById('editProductId').value = productId;
       document.getElementById('editName').value = productName;
       document.getElementById('editDescription').value = productDescription;
       document.getElementById('editPrice').value = productPrice;

       // Show the modal
       modal.style.display = 'block';
     });
   });

   // Close modal when clicking on the close button
   closeModal.addEventListener('click', () => {
     modal.style.display = 'none';
   });

   // Close modal if clicked outside the modal content
   window.onclick = function(event) {
     if (event.target === modal) {
       modal.style.display = 'none';
     }
   };

   // Handle form submission via AJAX
   // Handle form submission via AJAX
document.getElementById('editProductForm').addEventListener('submit', function(e) {
  e.preventDefault();

  const formData = new FormData(this);
  const productId = formData.get('productId');
  const productName = formData.get('name');
  const productDescription = formData.get('description');
  const productPrice = formData.get('price');

  // Updated URL path to match the backend route
  fetch(`/manager/products/edit/${productId}`, {
  method: 'POST',
  body: JSON.stringify({
    name: productName,
    description: productDescription,
    price: productPrice
  }),
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
})
.then(response => {
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
})
.then(data => {
  if (data.success) {
    alert('Product updated successfully');
    modal.style.display = 'none';  // Close modal after successful edit
    location.reload();  // Reload the page to reflect changes
  } else {
    alert('Failed to update product.');
  }
})
.catch(err => {
  console.error('Error updating product:', err);
  alert('Failed to update product.');
});

});
</script>

<style>
  .modal {
  display: none;  /* Hide modal by default */
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/opacity */
}

.modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

</style>